import argparse

def parse():

    parser = argparse.ArgumentParser()
    parser.add_argument('--dataset', required=True, help='amazon/amazon_tool | amazon/amazon_office | douban/douban_movie | douban/douban_music | epinions/epinions')
    parser.add_argument('--train_dir', default='test', type=str, help='directory to write model to')
    parser.add_argument('--batch_size', default=128, type=int)
    parser.add_argument('--lr', default=0.001, type=float)
    parser.add_argument('--wd', default=0.0, type=float)
    parser.add_argument('--maxlen', default=200, type=int)
    parser.add_argument('--hidden_units', default=50, type=int)
    parser.add_argument('--num_blocks', default=2, type=int)
    parser.add_argument('--num_epochs', default=201, type=int)
    parser.add_argument('--epoch_test', default=40, type=int)
    parser.add_argument('--num_heads', default=1, type=int)
    parser.add_argument('--dropout_rate', default=0.2, type=float)
    parser.add_argument('--l2_emb', default=0.0, type=float, help = 'weight of l2 loss of embedding')
    parser.add_argument('--device', default='cuda', type=str)
    parser.add_argument('--train_only',  action='store_true')
    parser.add_argument('--inference_only',  action='store_true')
    parser.add_argument('--save_neg',  action='store_true')
    parser.add_argument('--mode', default='test', type=str, help='valid | test')
    parser.add_argument('--state_dict_path', default=None, type=str)
    parser.add_argument('--model', default='newrec', type=str, help='newrec | mostpop | sasrec | bert4rec | bprmf')
    parser.add_argument('--monthpop', default='wtembed', type=str, help='format of month popularity: wtembed (time-weighted) | currembed (current month) | cumembed (cumulative)')
    parser.add_argument('--weekpop', default='week_embed2', type=str, help='format of week popularity: current is 4-week popularity')
    parser.add_argument('--rawpop', default='cumpop', type=str, help='format of popularity for mostpop model: current is cumulative')
    parser.add_argument('--userpop', default='lastuserpop', type=str, help='ultimate user popularity used if eval_quality true')
    parser.add_argument('--base_dim1', default=11, type=int, help='dimension of month popularity vector, newrec only')
    parser.add_argument('--input_units1', default=132, type=int, help='base_dim1 * number of months considered, newrec only')
    parser.add_argument('--base_dim2', default=6, type=int, help='dimension of week popularity vector, newrec only')
    parser.add_argument('--input_units2', default=6, type=int, help='base_dim2 * number of 4 week groups considered, newrec only')
    parser.add_argument('--mask_prob', default=0, type=float, help='cloze task, bert4rec only')
    parser.add_argument('--seed', default=2023, type=int)
    parser.add_argument('--topk','--list', nargs='+', default=[10], type=int, help='# items for evaluation')
    parser.add_argument('--augment', action='store_true', help='use data augmentation, newrec only')
    parser.add_argument('--augfulllen', default=0, type=int, help='length of full user history then split into augmented parts, 0 indicates no cutoff')
    parser.add_argument('--transfer', action='store_true', help='zero-shot transfer, newrec only')
    parser.add_argument('--fs_transfer', action='store_true', help='few-shot transfer, newrec only')
    parser.add_argument('--fs_num_epochs', default=10, type=int, help='number of training  epochs for few-shot transfer')
    parser.add_argument('--loss_size', default=250, type=int, help='ratio of items used in loss, newb4rec only')
    parser.add_argument('--max_split_size', default=-1.0, type=float)
    parser.add_argument('--no_fixed_emb', action='store_true', help='for now, available in newrec only')
    parser.add_argument('--eval_method', default=1, type=int, help='1: random 100-size subset, 2: popularity 100-size subset, 3: full set')
    parser.add_argument('--eval_quality', action='store_true', help='evaluate across groups of user popularity')
    parser.add_argument('--quality_size', default=10, type=int, help='percentile size of group if eval_quality is True')
    parser.add_argument('--wrong_num', action='store_true', help='0-index users & items (for testing old runs)')
    parser.add_argument('--triplet_loss', action='store_true', help='triplet regularization loss on user final embeddings using trajectory')
    parser.add_argument('--cos_loss', action='store_true', help='cosine regularization loss on user final embeddings using trajectory')
    parser.add_argument('--reg_file', default='userhist', type=str, help='user vectors used in reg loss')
    parser.add_argument('--reg_num', default=10, type=int, help='# of positive and negative examples per user per batch for reg loss')
    parser.add_argument('--reg_coef', default=1.0, type=float, help='weight for regularization loss')
    parser.add_argument('--only_reg', action='store_true', help='only reg loss')
    parser.add_argument('--itemgrp', action='store_true', help='use item co-occurrence')
    parser.add_argument('--itemgrp_file', default='copca', type=str, help='features for item co-occurrence')
    parser.add_argument('--traj_form', default='', type=str, help='model form to use for traj_form, default is no model: mlp (separate model gated after) | attention (incorporated into sequence)')
    parser.add_argument('--traj_file', default='userhist', type=str, help='user trajectories used for gating')
    parser.add_argument('--traj_dim', default=100, help='original size of trajectory')
    parser.add_argument('--traj_perc', default=100, help='scale from 1 to traj_perc to use for user percentile encoding')
    parser.add_argument('--traj_enc_type', default='sin', help='type of encoding to use for trajectory if traj_form = attention, sin (sinusoidal) | lin (linear bin)')

    args = parser.parse_args()
    return args